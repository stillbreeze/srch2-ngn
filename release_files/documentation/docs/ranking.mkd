#Ranking

##1. Overview

The SRCH2 engine allows a user to customize the ranking of records by providing a framework with various tunable parameters that can be specified in the configuration file. In addition to using classic features such as TF/IDF, field boosts, and record boosts, the framework also provides more control specifically needed in the context of instant search and fuzzy search. In particular, the engine allows the user to control the following:

- How much penalty we want give to partial matches (e.g., "candy" vs "can" ) compared to complete-keyword matches (e.g., "can" vs "can), using the parameter "PrefixMatchPenalty"; and
- How much penalty we want give to fuzzy matches (e.g., "schwazeneger" vs "schwarzenegger") compared to exact matches using the parameter "FuzzyMatchPenalty".

##2. Formula

Now we give the details of the ranking function. Intuitively, for a query and a candidate record (document), we compute the score of each term in the query for the record, and take the summation of these scores as the overall score. We order the records based on their overall score. The engine guarantees that exact results are always ranked higher than fuzzy results.

Formally, let <i>Q</i> be a query with terms (keywords) <i>t_1</i>, <i>t_2</i>, ..., <i>t_k</i>. Let <i>r</i> be a record. We compute the score of <i>r</i> for <i>Q</i> as follows:

<center> score(<i>r</i>, <i>Q</i>) = TermScore(<i>r</i>, <i>t_1</i>) + TermScore(<i>r</i>, <i>t_2</i>) + ... + TermScore(<i>r</i>, <i>t_k</i>).</center>

For each term <i>t_i</i>, let <i>w_i</i> be a keyword in <i>r</i> that matches <i>t_i</i> (exactly or fuzzily). The TermScore(<i>r</i>, <i>t_i</i>) is computed as follows:

<center> TermScore(<i>r</i>, <i>t_i</i>) = TermRecordStaticScore(<i>r</i>, <i>t_i</i>) * NormalizedEdSimilarity(<i>w_i</i>, <i>t_i</i>) * PrefixMatchPenalty.</center>

The formula uses the following parameters:

<b>1) NormalizedEdSimilarity(<i>w_i</i>, <i>t_i</i>)</b>: it is the similarity between the query term and the record term, based on their edit distance and normalized by the length of the record term. It is calculated as follows:

<center> NormalizedEdSimilarity(<i>w_i</i>, <i>t_i</i>) = (1 - ed(<i>w_i</i>, <i>t_i</i>)/length(<i>t_i</i>)) * FuzzyMatchPenalty^ed. </center>

In the formula, "ed(<i>w_i</i>, <i>t_i</i>)" is the edit distance between <i>w_i</i> and <i>t_i</i>, with length(<i>t_i</i>) as its upper bound. The value "FuzzyMatchPenalty" (between 0 and 1) is specified in the configuration file. Its default value is 1.0.

<b>2) PrefixMatchPenalty</b>: It is 1 if term <i>t_i</i> is a complete keyword. If term <i>t_i</i> is a prefix, then PrefixMatchPenalty takes the value of the parameter "prefixMatchPenalty" specified in the [configuration file](../example-demo/srch2-config.xml).

<b>3) TermRecordStaticScore(r, t_i)</b>: It is the static score of this term for this record, which is computed and stored during index construction. It uses an expression customizable in the configuration file. The expression can use the following parameters:

- <b>text_relevance(r, t_i)</b>: text-based relevance between the
  keyword <i>t_i</i> and the record <i>r</i>;
- <b>doc_boost(r)</b>: the boost value of the record as specified in an attribute;
- <b>doc_length(r)</b>: number of unique keywords in the record <i>r</i>.

The expression allows operators such as +, -, /, *, (, ), 0-9, etc.

The "text_relevance" is calculated as:

<center> text_relevance(<i>r</i>, <i>t_i</i>) = tf(<i>r</i>, <i>t_i</i>) * idf(<i>t_i</i>) * sumOfFieldBoosts(<i>r</i>, <i>t_i</i>).</center>


If [positional ranking](configuration.mkd#74-enable-positional-index-optional) is
enabled, the value "tf(<i>r</i>, <i>t_i</i>)" is calculated as:
 <center> tf(<i>r</i>, <i>t_i</i>) = sqrt(# of times <i>t_i</i> appears in <i>r</i>).</center>
Otherwise, its value is 1.

The value "idf(<i>t_i</i>)" is the inverted document frequency calculated as follows:

<center>idf(<i>t_i</i>) = 1 + <i>log_e</i> (total # of documents/ (# of documents having term <i>t_i</i> + 1)).</center>

The value "sumOfFieldBoosts(<i>r</i>, <i>t_i</i>)" is the summation of
the boosts of the attributes of <i>r</i> that have this keyword <i>t_i</i>.
Therefore, we can assign higher boosts to attributes to
increase their weights in the ranking.

In the case where the record <i>r</i> has multiple keywords
<i>w_i</i>'s that match term <i>t_i</i>, TermScore(<i>r</i>,
<i>t_i</i>) is the largest value among them.

##3. Proximity Ranking

The engine can do ranking based on proximity of matching keywords
in a record.  Intuitively, the closer the matching keywords are in a
record, the more relevant this record is to the query.   Proximity
ranking is used in a [phrase 
search](restful-search.mkd#334-proximity-search) only.  For such a
query <i>Q</i>, the final score for a record <i>r</i> is:
<center> score(r, Q) * phraseFrequency(r, Q).</center>

The value <i>score(r, Q)</i> is explained above. The value
"<i>phraseFrequency(r, Q)</i>" quantifies the positional relevance of the 
record <i>r</i> based 
on the proximity of the matching keywords of <i>Q</i> in <i>r</i>.
It is calculated as follows.  Suppose the keywords in <i>Q</i> have
phrase occurrences <i>O_1</i>, <i>O_2</i>, ..., <i>O_p</i> in record
<i>r</i>.  For each of them <i>O_i</i>, let <i>d_i</i> be the distance
between this occurrence and the query keywords, i.e., the "edit distance"
between the occurrence and the query keywords where we treat each word
as a "character" in the definition of edit distance.  The value
<i>phraseFrequency(r, Q)</i> is calculated as:
<center><i>phraseFrequency(r, Q)</i> = <i>sqrt(1/(1+d_1) + 1/(1+d_2) + ... + 1/(1+d_p))</i>.</center>

For example, consider a query "<i>class test</i>" and the following
two records:

- Record <i>r_1</i>: <b><tt>This is class test.</tt></b>
- Record <i>r_2</i>: <b><tt>This is last and final class test. There will be no more class test.</tt></b>

For record <i>r_1</i>, the query phrase has one occurrence, and its
distance is 0.  So the phrase frequency is:
<center><i>phraseFrequency(r_1, Q)</i> = <i>sqrt(1/(1+0) = 1</i>.</center>

For record <i>r_2</i>, the query phrase has three occurrences.  To
explain them, we put the offset number to each word:

<b><tt>This(1) is(2) last(3) and(4) final(5) class(6) test(7). There(8) will(9) be(10) no(11) more(12) class(13) test(14).</tt></b>

Here are the three occurrences:

- Occurrence <i>O_1</i>: <b><tt>class(6) test(7)</tt></b>, with a distance 0;
- Occurrence <i>O_2</i>: <b><tt>class(13) test(14)</tt></b>, with a distance 0;
- Occurrence <i>O_3</i>: <b><tt>test(7) class(13)</tt></b>, with a
 distance 7, because we can delete the 5 words between
<b><tt>test(7)</tt></b> and <b><tt>class(13)</tt></b>, and do a swap
operation (with a cost of 2) to obtain the query phrase <b><tt>class test</tt></b>.

So the phrase frequency for this record is:

<center><i>phraseFrequency(r_2, Q)</i> = <i>sqrt(1/(1+0) + 1/(1+0) + 1/(1+7)) = sqrt(2.125) = 1.457</i>.</center>

For each record <i>r_i</i>, its phrase frequency is multiplied by its
<i>score(r_i, Q)</i> to get the final proximity-based score of the
record with respect to the query.

Since a phrase-search condition is treated as a filter by the
SRCH2 engine, to do proximity ranking, we can specify the keywords as a phrase with
a large slop distance (at most 10000).  For instance, we can use 
the condition <center>q="class test"~8000</center> to do proximity ranking for the
two keywords, by only considering those occurrences where the two keywords
are at most 8000 words apart.

##4. Feedback-Based Ranking

The SRCH2 engine has a unique, powerful feature to dynamically
boost the ranking of records based on user feedback.  Here "user feedback"
means the fact that users selected certain results for a query.
Intuitively, the more a record is selected by users for a query, the
more relevant this record should be to the same query in the future.
For more related information, refer to [feedback
configuration](../configuration/#15-user-feedback-optional) and
[feedback API](../restful-control/#7-adding-feedback-for-search-results).

Formally, assume initially a user submits a query <i>Q</i>, which has a set of search
results {R<sub>1</sub> , R<sub>2</sub>, ..., R<sub>n</sub>}. If the
user selects the record R<sub>i</sub> as the answer, then the engine
stores a "feedback tuple":
<center> <i>F</i> = {<i>Q</i>, R<sub>i</sub>}.</center> 
If the same query <i>Q</i> is submitted again, possibly by a different
user, the engine will use the feedback tuple above to boost
the ranking of the record R<sub>i</sub>.

For example, consider the following query <i>Q</i> with a keyword
 "trip":
```
curl http://server:port/search?q=trip
```
It returns the following list of results:

  - R<sub>1</sub> = { "id" : "1", "title" : "TripAdvisor: Reviews of Hotels, Flights and Vacation Rentals" } </br>
  - R<sub>2</sub> = { "id" : "2", "title" : "Cheap Flights, Hotels & Trips , Trip.com" } </br>
  - R<sub>3</sub> = { "id" : "3", "title" : "www.tripnet.org The Road Information Program" } </br>
  - R<sub>4</sub> = { "id" : "4", "title" : "TRIP: Summary for TripAdvisor, Inc.- Yahoo! Finance" } </br>
  - R<sub>5</sub> = { "id" : "5", "title" : "TRiP Santa Monica * Live Music Santa Monica, Venice" } </br>
  - R<sub>6</sub> = { "id" : "6", "title" : "KAYAK - My Trips" } </br>
  - R<sub>7</sub> = { "id" : "7", "title" : "My Trips - a free online trip planner for business, leisure and group travel." }  </br>

Suppose the user selects R<sub>5</sub> as a best match for this
query. Such a feedback can be submitted to the engine using the
[feedback API](../restful-control/#7-adding-feedback-for-search-results).  In
particular, the client (possibly using javascript) sends the following
request to the engine:

```
curl "http://server:port/feedback" -X PUT -d  '{query = "trip", recordId = "5"}'
```

The engine uses the following formula to calculate the boost factor for the record R<sub>i</sub>:

<center><code>Boost<sub>R<sub>i</sub></sub> = 1 +  &Delta;T &times; F<sub>Q</sub><sup>R<sub>i</sub></sup>, </code></center>

where:

 - &Delta;T =  1 - ((T<sub>Q</sub> - T<sub>f</sub><sup>R<sub>i</sub></sup>) / K)<sup>2</sup>;
 - T<sub>Q</sub> : arrival time of the current query <i>Q</i>;
 - T<sub>f</sub><sup>R<sub>i</sub></sup> : the most recent time when R<sub>i</sub> was submitted as a feedback for the query <i>Q</i>;
 - F<sub>Q</sub><sup>R<sub>i</sub></sup> : sqrt(number of times R<sub>i</sub> is selected for query <i>Q</i>).

The final score of the record R<sub>i</sub> will be its original score
multiplied by this boost factor.  Based on the formula, the more times R<sub>i</sub> is selected for
query <i>Q</i>, the higher the boost value is.  In addition, as the
feedback of record R<sub>i</sub> for query <i>Q</i> gets older, its
effect on its overall score decreases.




